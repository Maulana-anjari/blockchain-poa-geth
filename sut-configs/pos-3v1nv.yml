# Auto-generated by scripts/generate-compose.sh for a PoS network.
services:
  # --- Consensus Layer Bootnode (Prysm) ---
  consensus-bootnode:
    image: prysmaticlabs/prysm-beacon-chain:latest
    container_name: consensus-bootnode
    command: >
      geth
      --datadir=/consensus/beacondata
      --chain-config-file=/config/config.yml
      --genesis-state=/config/genesis.ssz
      --p2p-host-ip=0.0.0.0
      --p2p-tcp-port=13000
      --p2p-udp-port=12000
    volumes:
      - ./data/pos/consensus/beacondata:/consensus/beacondata
      - ./config/pos:/config
    networks:
      - geth-network
    restart: unless-stopped
  execution1:
    image: ethereum/client-go:alltools-latest
    container_name: execution1
    command: >
      geth
      --datadir=/execution/geth
      --networkid=${NETWORK_ID}
      --http --http.addr=0.0.0.0 --http.vhosts="*" --http.corsdomain="*"
      --http.api=eth,net,web3,engine
      --ws --ws.addr=0.0.0.0 --ws.origins="*"
      --authrpc.vhosts="*" --authrpc.addr=0.0.0.0 --authrpc.jwtsecret=/execution/jwt.hex
      --bootnodes="" # PoS uses CL for discovery
    volumes:
      - ./data/pos/execution/geth:/execution/geth
      - ./data/pos/jwtsecret/jwt.hex:/execution/jwt.hex
      - ./config/genesis.json:/config/genesis.json
    networks:
      - geth-network
    restart: unless-stopped
  consensus1:
    image: prysmaticlabs/prysm-beacon-chain:latest
    container_name: consensus1
    depends_on: [execution1]
    command: >
      geth
      --datadir=/consensus/beacondata
      --chain-config-file=/config/config.yml
      --genesis-state=/config/genesis.ssz
      --execution-endpoint=http://execution1:8551
      --jwt-secret=/consensus/jwt.hex
      --rpc-host=0.0.0.0
      --grpc-gateway-host=0.0.0.0
      --bootstrap-node=$(/usr/local/bin/prysm.sh beacon-chain --datadir=/consensus/beacondata --chain-config-file=/config/config.yml --genesis-state=/config/genesis.ssz p2p id | grep "Peer ID" | awk '{print }')@consensus-bootnode:13000
    volumes:
      - ./data/pos/consensus/beacondata:/consensus/beacondata
      - ./config/pos:/config
      - ./data/pos/jwtsecret/jwt.hex:/consensus/jwt.hex
    networks:
      - geth-network
    restart: unless-stopped
  validator1:
    image: prysmaticlabs/prysm-validator:latest
    container_name: validator1
    depends_on: [consensus1]
    command: >
      geth
      --datadir=/validator/data
      --beacon-rpc-provider=consensus1:4000
      --chain-config-file=/config/config.yml
      --wallet-dir=/validator/keys
      --wallet-password-file=/validator/pass/pass.txt
    volumes:
      - ./data/pos/consensus/validatordata/validator1:/validator/keys
      - ./data/pos/consensus/validatordata/pass.txt:/validator/pass/pass.txt
      - ./config/pos:/config
    networks:
      - geth-network
    restart: unless-stopped
  execution2:
    image: ethereum/client-go:alltools-latest
    container_name: execution2
    command: >
      geth
      --datadir=/execution/geth
      --networkid=${NETWORK_ID}
      --http --http.addr=0.0.0.0 --http.vhosts="*" --http.corsdomain="*"
      --http.api=eth,net,web3,engine
      --ws --ws.addr=0.0.0.0 --ws.origins="*"
      --authrpc.vhosts="*" --authrpc.addr=0.0.0.0 --authrpc.jwtsecret=/execution/jwt.hex
      --bootnodes="" # PoS uses CL for discovery
    volumes:
      - ./data/pos/execution/geth:/execution/geth
      - ./data/pos/jwtsecret/jwt.hex:/execution/jwt.hex
      - ./config/genesis.json:/config/genesis.json
    networks:
      - geth-network
    restart: unless-stopped
  consensus2:
    image: prysmaticlabs/prysm-beacon-chain:latest
    container_name: consensus2
    depends_on: [execution2]
    command: >
      geth
      --datadir=/consensus/beacondata
      --chain-config-file=/config/config.yml
      --genesis-state=/config/genesis.ssz
      --execution-endpoint=http://execution2:8551
      --jwt-secret=/consensus/jwt.hex
      --rpc-host=0.0.0.0
      --grpc-gateway-host=0.0.0.0
      --bootstrap-node=$(/usr/local/bin/prysm.sh beacon-chain --datadir=/consensus/beacondata --chain-config-file=/config/config.yml --genesis-state=/config/genesis.ssz p2p id | grep "Peer ID" | awk '{print }')@consensus-bootnode:13000
    volumes:
      - ./data/pos/consensus/beacondata:/consensus/beacondata
      - ./config/pos:/config
      - ./data/pos/jwtsecret/jwt.hex:/consensus/jwt.hex
    networks:
      - geth-network
    restart: unless-stopped
  validator2:
    image: prysmaticlabs/prysm-validator:latest
    container_name: validator2
    depends_on: [consensus2]
    command: >
      geth
      --datadir=/validator/data
      --beacon-rpc-provider=consensus2:4000
      --chain-config-file=/config/config.yml
      --wallet-dir=/validator/keys
      --wallet-password-file=/validator/pass/pass.txt
    volumes:
      - ./data/pos/consensus/validatordata/validator2:/validator/keys
      - ./data/pos/consensus/validatordata/pass.txt:/validator/pass/pass.txt
      - ./config/pos:/config
    networks:
      - geth-network
    restart: unless-stopped
  execution3:
    image: ethereum/client-go:alltools-latest
    container_name: execution3
    command: >
      geth
      --datadir=/execution/geth
      --networkid=${NETWORK_ID}
      --http --http.addr=0.0.0.0 --http.vhosts="*" --http.corsdomain="*"
      --http.api=eth,net,web3,engine
      --ws --ws.addr=0.0.0.0 --ws.origins="*"
      --authrpc.vhosts="*" --authrpc.addr=0.0.0.0 --authrpc.jwtsecret=/execution/jwt.hex
      --bootnodes="" # PoS uses CL for discovery
    volumes:
      - ./data/pos/execution/geth:/execution/geth
      - ./data/pos/jwtsecret/jwt.hex:/execution/jwt.hex
      - ./config/genesis.json:/config/genesis.json
    networks:
      - geth-network
    restart: unless-stopped
  consensus3:
    image: prysmaticlabs/prysm-beacon-chain:latest
    container_name: consensus3
    depends_on: [execution3]
    command: >
      geth
      --datadir=/consensus/beacondata
      --chain-config-file=/config/config.yml
      --genesis-state=/config/genesis.ssz
      --execution-endpoint=http://execution3:8551
      --jwt-secret=/consensus/jwt.hex
      --rpc-host=0.0.0.0
      --grpc-gateway-host=0.0.0.0
      --bootstrap-node=$(/usr/local/bin/prysm.sh beacon-chain --datadir=/consensus/beacondata --chain-config-file=/config/config.yml --genesis-state=/config/genesis.ssz p2p id | grep "Peer ID" | awk '{print }')@consensus-bootnode:13000
    volumes:
      - ./data/pos/consensus/beacondata:/consensus/beacondata
      - ./config/pos:/config
      - ./data/pos/jwtsecret/jwt.hex:/consensus/jwt.hex
    networks:
      - geth-network
    restart: unless-stopped
  validator3:
    image: prysmaticlabs/prysm-validator:latest
    container_name: validator3
    depends_on: [consensus3]
    command: >
      geth
      --datadir=/validator/data
      --beacon-rpc-provider=consensus3:4000
      --chain-config-file=/config/config.yml
      --wallet-dir=/validator/keys
      --wallet-password-file=/validator/pass/pass.txt
    volumes:
      - ./data/pos/consensus/validatordata/validator3:/validator/keys
      - ./data/pos/consensus/validatordata/pass.txt:/validator/pass/pass.txt
      - ./config/pos:/config
    networks:
      - geth-network
    restart: unless-stopped
  execution4:
    image: ethereum/client-go:alltools-latest
    container_name: execution4
    command: >
      geth
      --datadir=/execution/geth
      --networkid=${NETWORK_ID}
      --http --http.addr=0.0.0.0 --http.vhosts="*" --http.corsdomain="*"
      --http.api=eth,net,web3,engine
      --ws --ws.addr=0.0.0.0 --ws.origins="*"
      --authrpc.vhosts="*" --authrpc.addr=0.0.0.0 --authrpc.jwtsecret=/execution/jwt.hex
      --bootnodes="" # PoS uses CL for discovery
    volumes:
      - ./data/pos/execution/geth:/execution/geth
      - ./data/pos/jwtsecret/jwt.hex:/execution/jwt.hex
      - ./config/genesis.json:/config/genesis.json
    networks:
      - geth-network
    restart: unless-stopped
  consensus4:
    image: prysmaticlabs/prysm-beacon-chain:latest
    container_name: consensus4
    depends_on: [execution4]
    command: >
      geth
      --datadir=/consensus/beacondata
      --chain-config-file=/config/config.yml
      --genesis-state=/config/genesis.ssz
      --execution-endpoint=http://execution4:8551
      --jwt-secret=/consensus/jwt.hex
      --rpc-host=0.0.0.0
      --grpc-gateway-host=0.0.0.0
      --bootstrap-node=$(/usr/local/bin/prysm.sh beacon-chain --datadir=/consensus/beacondata --chain-config-file=/config/config.yml --genesis-state=/config/genesis.ssz p2p id | grep "Peer ID" | awk '{print }')@consensus-bootnode:13000
    volumes:
      - ./data/pos/consensus/beacondata:/consensus/beacondata
      - ./config/pos:/config
      - ./data/pos/jwtsecret/jwt.hex:/consensus/jwt.hex
    networks:
      - geth-network
    restart: unless-stopped

  # --- Monitoring Stack ---
  ethstats-server:
    # Builds the Ethstats server image directly from its GitHub repository.
    build:
      context: https://github.com/goerli/ethstats-server.git
    container_name: ethstats-server
    environment:
      WS_SECRET: "${ETHSTATS_WS_SECRET}"
    ports:
      - "${BASE_MONITORING_HTTP_PORT}:3000"
    networks:
      - geth-network
    restart: unless-stopped

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    volumes:
      # Use a named volume for persistent metrics data.
      - influxdb_data:/var/lib/influxdb
    environment:
      INFLUXDB_DB: "${INFLUXDB_DB}"
      INFLUXDB_ADMIN_USER: "${INFLUXDB_USER}"
      INFLUXDB_ADMIN_PASSWORD: "${INFLUXDB_PASSWORD}"
      INFLUXDB_HTTP_AUTH_ENABLED: "true"
      # These credentials are used by Geth to write data.
      INFLUXDB_USER: "${INFLUXDB_USER}"
      INFLUXDB_USER_PASSWORD: "${INFLUXDB_PASSWORD}"
    networks:
      - geth-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    depends_on: [influxdb]
    volumes:
      # Use a named volume for persistent dashboard configurations.
      - grafana_data:/var/lib/grafana
    ports:
      - "${BASE_GRAFANA_HTTP_PORT}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    networks:
      - geth-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - geth-network
    restart: unless-stopped

  pushgateway:
    image: prom/pushgateway:latest
    container_name: pushgateway
    ports:
      - "9091:9091"
    networks:
      - geth-network
    restart: unless-stopped

# --- Network & Volume Definitions ---
networks:
  geth-network:
    name: ${COMPOSE_PROJECT_NAME}_net
    driver: bridge

volumes:
  grafana_data: {}
  influxdb_data: {}
